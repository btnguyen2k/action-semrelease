name: "test"

on:
  pull_request:
    branches: [ '*' ]
  push:
    branches: [ '*' ]

jobs:
  # lint
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
      - name: Install Dependencies
        run: npm ci
      - name: Lint
        run: npm run lint

  # unit tests
  units:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
      - name: Install Dependencies
        run: npm ci
      - name: Run Tests
        run: |
          export GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
          export DRY_RUN=true
          export TAG_PREFIX=vu
          npm run test
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # test the action itself
  test_non_auto:
    runs-on: ubuntu-latest
    needs: [lint, units]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
      - name: Install Dependencies
        run: npm ci
      - name: Rebuild the dist/ directory
        run: npm run prepare
      - name: Run Action (non-auto)
        id: run-action-non-auto
        uses: ./
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          dry-run: true
          tag-prefix: vt
      - name: Check output (non-auto)
        run: |
          RESULT='${{ steps.run-action-non-auto.outputs.result }}'
          VERSION='${{ steps.run-action-non-auto.outputs.releaseVersion }}'
          RELEASE_NOTES='${{ steps.run-action-non-auto.outputs.releaseNotes }}'
          echo -e Result: ${RESULT}
          echo -e Version: ${VERSION}
          echo -e Release Notes: ${RELEASE_NOTES}
          if [ "${RESULT}" == "SUCCESS" ]; then
            cp -f package.json package.json.bak
            sed -i -E "s/^(\s*\"version\"\s*:\s*)\"[^\"]+\"/\1\"${VERSION}\"/" package.json
            echo ---------- content of package.json ----------
            cat package.json
            cp -f package.json.bak package.json
          fi

  # test the action itself
  test_auto:
    runs-on: ubuntu-latest
    needs: [lint, units]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
      - name: Install Dependencies
        run: npm ci
      - name: Rebuild the dist/ directory
        run: npm run prepare
      - name: Run Action (auto-mode)
        id: run-action-auto-mode
        uses: ./
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          dry-run: true
          auto-mode: true
          branches: main, release, dev, not-exists
          tag-prefix: va
      - name: Check output (auto-mode)
        run: |
          RESULT='${{ steps.run-action-auto-mode.outputs.result }}'
          VERSION='${{ steps.run-action-auto-mode.outputs.releaseVersion }}'
          RELEASE_NOTES='${{ steps.run-action-auto-mode.outputs.releaseNotes }}'
          echo -e Result: ${RESULT}
          echo -e Version: ${VERSION}
          echo -e Release Notes: ${RELEASE_NOTES}
          if [ "${RESULT}" == "SUCCESS" ]; then
            DATE=`date +%Y-%m-%d`
            cp -f RELEASE-NOTES.md RELEASE-NOTES.md.bak
            cp -f package.json package.json.bak
            head -1 RELEASE-NOTES.md > .temp.md
            echo -e "\n## ${DATE} - v${VERSION}\n\n${RELEASE_NOTES}" >> .temp.md
            tail -n +2 RELEASE-NOTES.md >> .temp.md
            mv -f .temp.md RELEASE-NOTES.md
            echo ---------- content of RELEASE-NOTES.md ----------
            cat RELEASE-NOTES.md
            sed -i -E "s/^(\s*\"version\"\s*:\s*)\"[^\"]+\"/\1\"${VERSION}\"/" package.json
            echo ---------- content of package.json ----------
            cat package.json
            cp -f RELEASE-NOTES.md.bak RELEASE-NOTES.md
            cp -f package.json.bak package.json
          fi

  # test the action itself
  test_dry_run:
    runs-on: ubuntu-latest
    needs: [lint, units]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
      - name: Install Dependencies
        run: npm ci
      - name: Rebuild the dist/ directory
        run: npm run prepare
      - name: Run Action (dry-run)
        id: run-action-dry-run
        uses: ./
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          dry-run: true
          auto-mode: true
          branches: main, release, dev, not-exists
          tag-prefix: v
      - name: Check output (dry-run)
        run: |
          RESULT='${{ steps.run-action-dry-run.outputs.result }}'
          VERSION='${{ steps.run-action-dry-run.outputs.releaseVersion }}'
          RELEASE_NOTES='${{ steps.run-action-dry-run.outputs.releaseNotes }}'
          echo -e Result: ${RESULT}
          echo -e Version: ${VERSION}
          echo -e Release Notes: ${RELEASE_NOTES}
          if [ "${RESULT}" == "SUCCESS" ]; then
            DATE=`date +%Y-%m-%d`
            cp -f RELEASE-NOTES.md RELEASE-NOTES.md.bak
            cp -f package.json package.json.bak
            head -1 RELEASE-NOTES.md > .temp.md
            echo -e "\n## ${DATE} - v${VERSION}\n\n${RELEASE_NOTES}" >> .temp.md
            tail -n +2 RELEASE-NOTES.md >> .temp.md
            mv -f .temp.md RELEASE-NOTES.md
            echo ---------- content of RELEASE-NOTES.md ----------
            cat RELEASE-NOTES.md
            sed -i -E "s/^(\s*\"version\"\s*:\s*)\"[^\"]+\"/\1\"${VERSION}\"/" package.json
            echo ---------- content of package.json ----------
            cat package.json
            cp -f RELEASE-NOTES.md.bak RELEASE-NOTES.md
            cp -f package.json.bak package.json
          fi

